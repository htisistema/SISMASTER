#include "fileio.ch"
#include "commands.ch"
#define  ETX CHR(3)
#define  CR  CHR(13)
#define  LF  CHR(10)
#define ENT_TXT  'ENT.TXT'
#define SAI_TXT  'SAI.TXT'
#define TMP_TXT  'ENT.TMP'

Static sENDER   := ''  ,;
SEM_ERRO := .F. ,;
sSECHORA := 0   ,;
sRETHORA := ''  ,;
sSECCOO  := 0   ,;
sNUMCUPOM:= ''  ,;
sSECEST  := 0   ,;
sESTADO  := ''  ,;
sMODELO  := ''

#ifdef __XHARBOUR__
   Static sSOCKET
#ENDIF
************************************************************************
FUNCTION IBR_INIT(ENDERECO)   // Abre a comunicação com o ACBrmonitor
* ENDERECO -> Diretorio ( quando usando TXT)  Ex: C:\ACBR\ , ou
*             IP:PORTA  (Socket) Ex: 192.168.0.1:3434
************************************************************************
LOCAL P, RET := .T., TFIM, IP, PORTA, RESP

IF ! EMPTY(sENDER)  // J  est  aberto...
        RETURN .t.
ENDIF
SEM_ERRO := .F.
sENDER   := ALLTRIM(ENDERECO)
sMODELO  := ''
IP       := ''
PORTA    := 0
//atencao(IP+' Porta:'+STRZERO(porta,4))
//atencao(endereco)
#ifdef __XHARBOUR__
        IF ! (PATH_DEL $ sENDER)   /// Abrir comunicacao TCP/IP
                P := at(':',sENDER)
                IF P = 0
                        P := LEN(sENDER)+1
                ENDIF
                IP    := SUBSTR(sENDER,1,P-1)
                IF EMPTY(IP)
                        RET := .F.
                ELSE
                        PORTA := VAL(SUBSTR(sENDER,P+1))
                        IF PORTA = 0
                                PORTA := 3434
                        ENDIF
                        inetinit()
                        RET := .F.

                        TFIM := SECONDS() + 5             /// Tenta conectar durante 5 segundos ///
                        WHILE SECONDS() < TFIM .and. ! RET
                                sSOCKET := inetconnect(IP,PORTA)
                                RET     := (ineterrorcode(sSOCKET) = 0)
                                INKEY(0.10,250)
                        ENDDO
                ENDIF

                IF RET
                        InetSetTimeout( sSOCKET, 3000 )   // Timeout de Recepção 3 seg //
                        RESP := InetRecvEndBlock( sSOCKET, ETX )
                        //atencao(resp)
                        IF PORTA = 3434
                                //IF m_indiv[1,37] = 'C:\ACBRMONITORPLUS\'
                                //        RET  := ('ACBrMonitorPlus' $ RESP )   // Recebeu as boas vindas ?
                                //ELSE
                                        RET  := ('ACBrMonitor' $ RESP )   // Recebeu as boas vindas ?
                                //ENDIF
                        ENDIF
                ELSE
                        atencao('Nao foi possivel abrir o SOCKET...')
                ENDIF
        ENDIF
#ENDIF
IF PATH_DEL $ sENDER   /// Abrir comunicacao TXT
        IF RIGHT(sENDER,1) <> PATH_DEL
                sENDER := sENDER + PATH_DEL
        ENDIF
ENDIF
IF ! RET
        sENDER := ''
ENDIF
RETURN RET
************************************************************************
FUNCTION IBR_ATIVO()   // Reseta Impressora em ERRO, Retorna .t. se OK
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.Ativo', , 40 ))
************************************************************************
FUNCTION IBR_ATIVA()   // Reseta Impressora em ERRO, Retorna .t. se OK
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.Ativar', , 40 ))
************************************************************************
FUNCTION IBR_DESATIVA()
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.Desativar', , 40 ))
************************************************************************
FUNCTION IBR_END()   // Fecha a porta da Impressora
* Encerra a comunicacao com a impressora, nao precisa de parametros
************************************************************************
#ifdef __XHARBOUR__
        IF ! PATH_DEL $ sENDER   /// Fechar comunicacao TCP/IP
                IF ! EMPTY(sENDER)
                        inetsendall( sSocket, 'ACBR.bye' )
                ENDIF
                IF sSOCKET <> NIL
                        inetclose(sSOCKET)
                        inetdestroy(sSOCKET)
                        inetcleanup()
                        INKEY(.10,200)
                        sSOCKET := NIL
                ENDIF
        ENDIF
#ENDIF
sENDER  := ''
sMODELO := ''
RETURN .t.
************************************************************************
/*
FUNCTION IBR_ABERTA()   // Retorna .t. se a COM ja est  aberta
************************************************************************
RETURN ! EMPTY(sENDER)
*/
************************************************************************
FUNCTION IBR_OK(RESP)   // Retorna .T. se a String inicia com OK:
************************************************************************
RETURN (SUBSTR(RESP,1,3) == 'OK:')

************************************************************************
FUNCTION IBR_MODELO()   // Retorna .t. se a COM ja est  aberta
************************************************************************
IF EMPTY(sMODELO)
   sMODELO := LOWER(ALLTRIM(SUBSTR(IBR_COMANDO('ECF.modelo'),4)))
ENDIF
RETURN sMODELO

************************************************************************
FUNCTION IBR_ZERA()   // Reseta Impressora em ERRO, Retorna .t. se OK
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.CorrigeEstadoErro', , 40 ))

************************************************************************
FUNCTION IBR_TEF_INIT()   // Carrega na memoria vetores com Planos de
*                            Pagamento e CNF
************************************************************************
IBR_FIM_REL()
RETURN IBR_OK( IBR_COMANDO( 'ECF.PreparaTEF', , 25 ) )

************************************************************************
FUNCTION IBR_LEITURAX()   // Imprime relatorio de Leitura X, retorna .t. se ok
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.LeituraX', , 45 ) )

************************************************************************
FUNCTION IBR_REDUCAOZ()   // Imprime relatorio de Reducao Z, retorna .t. se ok
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.ReducaoZ', {dtoc(date())+' '+IBR_HORA()}, 40 ))

************************************************************************
/*
FUNCTION IBR_MEMORIA(TIPO,dat1,dat2)   // Imprime relatorio da MEMORIA FISCAL
************************************************************************
IF tipo = 'I'
        RETURN IBR_OK( IBR_COMANDO( 'ECF.LeituraMemoriaFiscal', {dat1,dat2}, 40 ))
        //RETURN IBR_OK( IBR_COMANDO( 'LEIturaMemoriaFiscalSerial', {dat1,dat2}, 40 ))
ELSE
        RETURN IBR_OK( IBR_COMANDO( 'ECF.LeituraMemoriaFiscal', {dtoc(dat1),dtoc(dat2)}, 40 ))
        //RETURN IBR_OK( IBR_COMANDO( 'LEIturaMemoriaFiscalSerial', {dtoc(dat1),dtoc(dat2)}, 40 ))
ENDIF
*/
************************************************************************
FUNCTION IBR_ESTADO()
* Retorna .t. se Iniciou o Fechamento do Cupom e estiver esperando
* Formas de Pagamento
************************************************************************
LOCAL RET
IF sSECEST <> SECONDS()
        RET := IBR_COMANDO( 'ECF.Estado' )
        IF LEFT(RET,3) == 'OK:'
                sESTADO := UPPER(ALLTRIM(SUBSTR(RET,5)))
                sSECEST := SECONDS()
        ELSE
                sESTADO := ''
        ENDIF
ENDIF
RETURN sESTADO
************************************************************************
FUNCTION IBR_DATA()   // Le a Data gravada na Impressora
* Retorna a data da impressora no tipo DATE
************************************************************************
LOCAL RET
IF sSECHORA <> SECONDS()
        RET := IBR_COMANDO( 'ECF.DataHora' )
        IF LEFT(RET,3) == 'OK:'
                sRETHORA := RET
                sSECHORA := SECONDS()
        ELSE
                sRETHORA := ''
        ENDIF
ENDIF
RETURN CTOD(SUBSTR(sRETHORA,5,8))
************************************************************************
FUNCTION IBR_HORA()   // Le a Hora gravada na Impressora
* Retorna uma string com a hora da impressora
************************************************************************
LOCAL RET
IF sSECHORA <> SECONDS()
        RET := IBR_COMANDO( 'ECF.DataHora' )
        IF LEFT(RET,3) == 'OK:'
                sRETHORA := RET
                sSECHORA := SECONDS()
        ELSE
                sRETHORA := ''
        ENDIF
ENDIF
RETURN SUBSTR(sRETHORA,14,8)
/*
************************************************************************
FUNCTION IBR_VERAO()   // Entra ou Sai do Hor rio de Verao, retorna .T. se ok
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.MudaHorarioVerao', , 8 ) )
*/
************************************************************************
FUNCTION IBR_NUM_CUPOM()   // Le o Numero do ultimo Cupom,
* Retorna string tamanho 6 com o numero do ultimo cupom
************************************************************************
LOCAL RET
IF sSECCOO <> SECONDS()
        RET := IBR_COMANDO( 'ECF.NumCupom' )
        IF LEFT(RET,3) == 'OK:'
                sNUMCUPOM := STRZERO(VAL(SUBSTR(RET,5)),6)
                sSECCOO   := SECONDS()
        ELSE
                sNUMCUPOM := '000000'
        ENDIF
ENDIF
RETURN sNUMCUPOM
************************************************************************
FUNCTION IBR_SUBTOTAL()   // Retorna o Subtotal do cupom aberto
************************************************************************
LOCAL WSTR
WSTR := SUBSTR(IBR_COMANDO( 'ECF.SubTotal' ),5)
RETURN VAL(STRTRAN(WSTR,',','.'))
************************************************************************
FUNCTION IBR_TOTALPAG()   // Retorna o Total de Pagamentos efetuados
************************************************************************
LOCAL WSTR
WSTR := SUBSTR(IBR_COMANDO( 'ECF.TotalPago' ),5)
RETURN VAL(STRTRAN(WSTR,',','.'))

************************************************************************
FUNCTION IBR_NUM_CAIXA()   // Le o Numero do caixa
* Retorna string tamanho 4 com o numero do caixa da impressora,
* geralmente '0001' a nao ser que no estabelecimento existam 2 impressoras
************************************************************************
Static sNumECF := ''
IF VAL(sNumECF) = 0
        sNumECF := STRZERO(VAL(SUBSTR(IBR_COMANDO( 'ECF.NumECF' ),5)),3)
ENDIF
RETURN sNumECF

************************************************************************
FUNCTION IBR_NUM_SERIE()   // Retorna o Numero de Srie da Impressora
************************************************************************
Static sNumSerie := ''
IF EMPTY(sNumSerie)
        sNumSerie := Alltrim(SUBSTR(IBR_COMANDO( 'ECF.NumSerie' ),5))
ENDIF
RETURN sNumSerie

************************************************************************
FUNCTION IBR_VERSAO()   // Le o Numero de versao da impressora 4 dig.
************************************************************************
Static sVersao := ''
IF EMPTY(sVersao)
        sVersao := Alltrim(SUBSTR(IBR_COMANDO( 'ECF.NumVersao' ),5))
ENDIF
RETURN sVersao

************************************************************************
FUNCTION IBR_POUCO_PAPEL()  // Retorna .t. se for pouco papel
************************************************************************
RETURN (upper(SUBSTR(IBR_COMANDO( 'ECF.PoucoPapel' ),5,5)) = 'TRUE')

************************************************************************
FUNCTION IBR_CUPOM_ABERTO()  // Retorna .t. se cupom estiver aberto
************************************************************************
RETURN (IBR_ESTADO() = 'ECF.ESTVENDA')

************************************************************************
FUNCTION IBR_PODE_ABRIR()  // Retorna .t. se pode abrir novo cupom
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.TestaPodeAbrirCupom' ) )

************************************************************************
FUNCTION IBR_CHEQUE(WBANCO,WVALOR,WFAVORECIDO,WCIDADE,WDATA,WOBS)
* Imprime cheque, necessita de BANCOS.TXT no mesmo diretorio do DRIVER,
* retorna .T. se ok
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.ImprimeCheque', {WBANCO, WVALOR, WFAVORECIDO,;
               WCIDADE, WDATA, WOBS}, 30 ))

************************************************************************
FUNCTION IBR_COM_CHEQUE()  // Retorna .t. se sensor de COM PAPEL ok
************************************************************************
RETURN (upper(SUBSTR(IBR_COMANDO( 'ECF.ChequePronto' ),5,5)) = 'TRUE')

************************************************************************
FUNCTION IBR_CAN_CHEQUE()  // Cancela Impressao de cheque, retorna .t. se conseguiu
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.CancelaImpressaoCheque' ) )

************************************************************************
FUNCTION IBR_ABRE_CUPOM(WCGC)   // Abre Cupom Fiscal, Retorna .t. se ok
* WCGC, SE RECEBIDO imprime o CGC do cliente no cabecalho
************************************************************************
sSECCOO := 0
RETURN IBR_OK( IBR_COMANDO( 'ECF.AbreCupom',{WCGC}, 8 ) )

************************************************************************
FUNCTION IBR_ACHA_PG(WPAGAMENTO,WVINC)  // Retorna codigo do Totalizador (String 2)
* equivaLENte a Forma de Pagamento passada se nao encontrar tenta cadastrar
* se conseguir retorna o novo numero, se nao conseguir encontrar nem
* cadastrar retorna "  "
* WPAGAMENTO -> String de 16, com Pagamento a localizar/Cadastra.
* WVINC -> Passado por referencia, Informa.T. se a Forma de Pagamento pode
*          imprimir Cupom Fiscal Vinculado
************************************************************************
LOCAL RET_IMP, RET:=''
SEM_ERRO := .T.
RET_IMP  := IBR_COMANDO( 'ECF.AchaFPGDescricao',{ALLTRIM(WPAGAMENTO)}, 8 )
SEM_ERRO := .F.
IF IBR_OK( RET_IMP )
        RET_IMP := SUBSTR(RET_IMP,5)
        IF ! EMPTY(RET_IMP)
                RET   := ALLTRIM(SUBSTR(RET_IMP,1,4))
                WVINC := (SUBSTR(RET_IMP,5,1)<>' ')
        ENDIF
ENDIF
RETURN RET

************************************************************************
FUNCTION IBR_ACHA_CNF(WDESCRICAO,WVINC)  // Retorna codigo do CNF
* WDESCRICAO -> String de 16, com CNF a localizar
* WVINC -> Passado por referencia, Informa.T. se a Forma de Pagamento pode
*          imprimir Cupom Fiscal Vinculado
************************************************************************
Static VET_CNF:={}
LOCAL RET_IMP,P,S,RET
IF EMPTY(VET_CNF)
        SEM_ERRO := .T.
        RET_IMP := IBR_COMANDO( 'ECF.ComprovantesNaoFiscais', ,  5 )
        SEM_ERRO := .F.
        IF IBR_OK( RET_IMP )
                RET_IMP := SUBSTR(RET_IMP,5)
                WHILE ! EMPTY(RET_IMP)
                        P := at('|',RET_IMP)
                        IF P = 0
                                P := LEN(RET_IMP)+1
                        ENDIF
                        S := SUBSTR(RET_IMP,1,P-1)
                        aadd(VET_CNF, {SUBSTR(S,1,4), (SUBSTR(S,5,1)<>' '), Alltrim(SUBSTR(S,6))} )
                        RET_IMP := SUBSTR(RET_IMP,P+1)
                ENDDO
        ENDIF
ENDIF
WDESCRICAO := Alltrim(upper(WDESCRICAO))
POS        := ascan(VET_CNF,{|x|upper(x[3])==WDESCRICAO .and. ;
iif(IBR_MODELO() == 'ecfschalter',! x[2],.t.) })
WVINC      := .F.
RET        := ''
IF POS > 0
        RET   := ALLTRIM(VET_CNF[POS,1])
        WVINC := VET_CNF[POS,2]
ENDIF
RETURN RET

************************************************************************
FUNCTION IBR_FECHA_CUPOM(WVAL_VISTA,WVAL_DESC,WMSG,WDESC_PLA,WA_D,WCOLUNAS,WAVISTA)
* FECHA Cupom Fiscal, retorna .t. se ok
* WVAL_VISTA -> Numerico, Valor A VISTA ou ENTRADA pago pelo cliente
*               (usado para calcular o troco)
* WVAL_DESC -> Numerico, Desconto/Acrescimo em VALOR, concedido para o cliente
* WMSG -> String, Mensagem promocional, linhas separadas por '|'
* WA_D -> String, 'a' - acrescimo, 'd' - desconto (Assume 'd' se omitida)
* WDESC_PLA -> Descricao do Plano de Pagamento
* WCOLUNAS -> Numero de caracteres por linha permitidas no cupom
* WAVISTA -> Se for .t. Considera sempre a vista
************************************************************************
LOCAL WMSG2,VET,A,WSUB_TOTAL, WCODAV, WCODAP, ESPERA, RET:=.T.,;
 WVAL_PRAZO  // Calculado se WVAL_VISTA for menor que SUBTOTAL
sSECCOO := 0
IF ! IBR_INI_FECHA( WVAL_DESC * iif(lower(WA_D)='a',1,-1) )
        RETURN .f.
ENDIF
WSUB_TOTAL := IBR_SUBTOTAL()
IF ! WAVISTA
        IF WSUB_TOTAL <= 0
                atencao('Subtotal retornado pela impressora : '+transform(WSUB_TOTAL,'@E 999.99')+;
                'Cupom ser  considerado A VISTA.')
                WAVISTA := .T.
        ELSE
                WCODAP := IBR_ACHA_PG('A PRAZO')

                IF EMPTY(WCODAP)
                        atencao('Forma de pagamento A PRAZO no encontrada. '+;
                        'Cupom ser  considerado A VISTA.')
                        WAVISTA := .T.
                ENDIF
        ENDIF
ENDIF
IF WAVISTA
        WVAL_VISTA := max(WSUB_TOTAL,WVAL_VISTA)
        WVAL_PRAZO := 0
ELSE
        WVAL_PRAZO := max(iat(WSUB_TOTAL - WVAL_VISTA,2),0)
ENDIF
//// Efetua formas de pagamento A VISTA e A PRAZO ////
IF ! EMPTY(WVAL_VISTA)
        IF ! (IBR_MODELO() == 'ecfbematech')
                WCODAV := IBR_ACHA_PG('A VISTA')
        ENDIF
        WCODAV := iif( EMPTY(WCODAV), '01', WCODAV)
        RET := IBR_PAGTO( WVAL_VISTA , WCODAV )
ENDIF
IF RET .and. ! EMPTY(WVAL_PRAZO)
        RET := IBR_PAGTO( WVAL_PRAZO , WCODAP )
ENDIF
IF RET
        RET := IBR_FIM_FECHA( WMSG )
ENDIF
RETURN RET

************************************************************************
FUNCTION IBR_FECHANDO()
* Retorna .t. se Iniciou o Fechamento do Cupom e estiver esperando
* Formas de Pagamento
************************************************************************
RETURN (IBR_ESTADO() = 'ECF.ESTPAGAMENTO')

************************************************************************
FUNCTION IBR_INI_FECHA( WDESC_ACRES )
* Inicia FECHAMENTO de Cupom Fiscal com Formas de Pagto, retorna .t. se OK
* WDESC_ACRES -> Numerico, Desconto/Acrescimo em VALOR, concedido para o
*                cliente. Se positivo ACRESCIMO senao DESCONTO
************************************************************************
LOCAL ret:=0
RETURN IBR_OK( IBR_COMANDO( 'ECF.SubTotalizaCupom',{WDESC_ACRES}, 5 ))
RETURN .T.
************************************************************************
FUNCTION IBR_PAGTO( WVALOR, WCODFPG, WOBS, WVINC )
* Efetua Pagamento em Cupom. Deve ser executada apos IBR_INI_FECHA
* Retorna .t. se OK
* WVALOR -> Valor Numerico pago pela Forma de Pagamento
* WCODFPG -> Codigo da Forma de Pagamento, pode ser achado com IBR_ACHA_PG
* WOBS -> Texto de 80 caracteres para OBS
* WVINC -> Boleano, se .t. ter  Cupom NAO Fiscal vinculado a esta FPG
*          (nao  necess rio na Bematech)
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.EfetuaPagamento',{WCODFPG, WVALOR, WOBS, WVINC}) )

************************************************************************
FUNCTION IBR_FIM_FECHA( WMSG, WCOLUNAS )
* FECHA Cupom Fiscal, retorna .t. se OK
* WMSG -> String, Mensagem promocional, linhas separadas por '|'
*         checagem de colunas  feita por IMF_FIM_FECHA
* WCOLUNAS -> ajustada por PAI IMF_FIM_FECHA
************************************************************************
sSECCOO := 0
RETURN IBR_OK( IBR_COMANDO( 'ECF.FechaCupom',{WMSG}, 20 ) )

************************************************************************
FUNCTION IBR_ITEM(WCODIGO,WDESCRICAO,WALIQ,WQTD,WVALOR_UNIT,WDESCONTO,WUN,WTIPO,WACDES)
* Efetua venda de itens no cupom Fiscal, retorna .t. se OK
* WCODIGO -> String, Codigo do produto 13 caracteres
* WDESCRICAO -> String, Descricao do produto 29 caracteres
* WALIQ -> % da aliquita a ser impressa, a rotina acha o totalizador
* Se a aliquota for numerica, procura o totalizador, senao,
* usa o propria aliquota que foi passada ('01','02','FF','NN',...)
* FF - Totalizador de Substituicao Tributaria,
* II - Totalizador parcial de Isenao
* NN - Totalizador parcial de NAO incidencia
* WQTD -> Numerico, Quantidade a ser impressa, a rotina ajusta a mascara
* WVALOR_UNIT -> Numerico, Valor Unitario do Produto, a rotina ajusta a mascara
* WDESCONTO -> Numerico, Desconto em % para aplicar, a rotina ajusta a mascara
* WUN - Descricao da unidade (se nulo assume 'UN')
* WTIPO - Tipo de Desconto (%) ou ($)
* WACDES - Tipo (D)esconto ou (A)crescimo
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.VendeItem',{WCODIGO, WDESCRICAO, WALIQ, WQTD,;
 WVALOR_UNIT, WDESCONTO, WUN,WTIPO,WACDES} ) )

************************************************************************
FUNCTION IBR_ACHA_ALIQ(WALIQ)  // Retorna codigo do Totalizador (String 2)
* equivaLENte a WALIQ passada, se nao encontrar volta "  "
* WALIQ -> Numerico, % do ICMS a localizar o Totalizador.
************************************************************************
Static VET_ALIQ
LOCAL POS:=0
IF VET_ALIQ = NIL
        VET_ALIQ := IBR_ALIQ()
ENDIF
POS := ascan(VET_ALIQ,{|x|x[1] = WALIQ})
RETURN iif(EMPTY(POS),"  ",VET_ALIQ[POS,2])
************************************************************************
FUNCTION IBR_ALIQ()  // Retorna vetor bi-dimensional com os codigos
* das aliquotas no formato {ALIQ(N 5,2),COD_ALIQ(C 2)}
* Funao de uso interno, pela funcao (IBR_ACHA_ALIQ())
************************************************************************
LOCAL RET_IMP,VET_RET:={},P,S
RET_IMP := IBR_COMANDO( 'ECF.CarregaAliquotas', , 10 )
IF IBR_OK( RET_IMP)
        RET_IMP := SUBSTR(RET_IMP,5)
        WHILE ! EMPTY(RET_IMP)
                P := at('|',RET_IMP)
                IF P = 0
                        P := LEN(RET_IMP)+1
                ENDIF
                S := SUBSTR(RET_IMP,1,P-1)
                aadd(VET_RET, {VAL(STRTRAN(SUBSTR(S,6,6),',','.')), SUBSTR(S,1,4)} )
                RET_IMP := SUBSTR(RET_IMP,P+1)
        ENDDO
ENDIF
RETURN VET_RET

***********************************************************************
FUNCTION IBR_CAN_CUPOM()  // Cancela Cupom fiscal, retorna .t. se ok
***********************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.CancelaCupom', , 14 ) )

************************************************************************
FUNCTION IBR_CAN_ITEM(WITEM)  // Cancela Item do Cupom fiscal, retona .t. se ok
* WITEM -> Numerico com Codigo sequencial do Item a cancaler
*  Ex.: 1 cancela o primeiro item vendido.
************************************************************************
RETURN IBR_OK( IBR_COMANDO( 'ECF.CancelaItemVendido',{WITEM}) )

************************************************************************
FUNCTION IBR_RELATORIO(WTXT,WVIAS,WCOLUNAS) // Imprime relatorio Gerencial
* Retorna .T. se imprimiu com sucesso
* WTXT  -> texto a Imprimir no relatorio, quebra de linhas = '|'
* WVIAS -> Numero de vias a imprimir 1 ou 2, padrao 1
* WCOLUNAS -> Numero m ximo de colunas da impressora, ajustada por IMF_RELATORIO
************************************************************************
LOCAL VET,A,RET,WIMP
DEFAULT WVIAS to 1
//VET  := SEPARA_STR(WTXT,'|')  // Separa as linhas de WTXT
VET  := WTXT
WIMP := 0
RET  := .T.
IBR_FIM_REL()   // Fecha se ficou algum aberto
//// Imprime relatorio gerencial ////
mensagem('Aguarde Imprimindo Relatorio...')
RET := IBR_OK( IBR_COMANDO( 'ECF.AbreRelatorioGerencial') )
WHILE RET
        a := 0
        FOR a = 1 TO LEN(vet)
                RET := IBR_OK( IBR_COMANDO( 'LinhaRelatorioGerencial',{VET[a]} ) )
        NEXT
        WIMP++
        IF ! RET .or. WIMP >= WVIAS
                exit
        ENDIF

//        IBR_COMANDO( 'ECF.LinhaRelatorioGerencial',{' | | | | | | '}, 5 )
//        clear typeahead
//        mensagem('  **  DESTAQUE A '+trim(str(WIMP,2))+'¦ VIA **              ENTER - Imprime proxima via',8)
ENDDO
IF RET
        RET := IBR_FIM_REL()
ENDIF
mensagem('Escolha a opcao que deseja...')
clear typeahead
RETURN RET

************************************************************************
FUNCTION IBR_VINCULADO(WCOO,WCODFPG,WVALOR,WTXT,WVIAS,WCOLUNAS)
* Imprime Comprovante NAO fiscal VINCULADO, Retorna .T. se imprimiu ok
* WCOO -> Numero do Cupom para Vincular
* WCODFPG -> Forma de Pagamento executada no Cupom a vincular
* WVALOR -> Valor pago atraves da Forma de Pagamento
* WTXT  -> texto a Imprimir no relatorio, quebra de linhas = '|'
* WVIAS -> Numero de vias a imprimir 1 ou 2, padrao 1
* WCOLUNAS -> Numero maximo de colunas da impressora, ajustada por IMF_RELATORIO
************************************************************************
LOCAL VET,A,RET,WIMP
DEFAULT WVIAS to 1
WCOO := strzero(VAL(WCOO),6)
//// Abrindo Comprovante NAO fiscal Vinculado ////
mensagem('Aguarde Imprimindo Cupom Vinculado...')
RET := IBR_OK( IBR_COMANDO( 'ECF.AbreCupomVinculado',{WCOO, WCODFPG, WVALOR}, 10 ) )
VET  := WTXT
WIMP := 0
//// Imprime relatorio gerencial ////
WHILE RET
        A := 1
        FOR A = 1 TO LEN(VET)
                RET := IBR_OK( IBR_COMANDO( 'LinhaCupomVinculado',{VET[A]} ) )
        NEXT
        //RET := IBR_OK( IBR_COMANDO( 'ECF.LinhaCupomVinculado',{WTXT}, Int(LEN(VET)/1.5)+4 ) )
        WIMP++
        IF ! RET .or. WIMP >= WVIAS
                exit
        ENDIF
        IBR_COMANDO( 'ECF.LinhaCupomVinculado',{' | | | | | | | '}, 5 )
        clear typeahead
        mensagem('  **  DESTAQUE A '+trim(str(WIMP,2))+' VIA **              ENTER - Imprime proxima via')
ENDDO
IF ! IBR_FIM_REL()
        RET := .F.
ENDIF
mensagem('Escolha sua opcao...')
clear typeahead
RETURN RET

************************************************************************
FUNCTION IBR_FIM_REL() // Encerra relatorio Gerencial e ou C.V.
************************************************************************
local RET
SEM_ERRO := .T.
RET := IBR_OK( IBR_COMANDO( 'ECF.FechaRelatorio', , 20 ) )
SEM_ERRO := .F.
RETURN RET

************************************************************************
FUNCTION IBR_NAOFISCAL(WCODCNF,WVALOR, WCODFPG, WOBS)
* Emite Comprovante NAO fiscal NAO vinculado
************************************************************************
local RET
SEM_ERRO := .T.
RET := IBR_OK( IBR_COMANDO( 'ECF.NaoFiscalCompleto',{WCODCNF,WVALOR,WCODFPG,WOBS}, 25 ) )
SEM_ERRO := .F.
RETURN RET

***********************************************************************
FUNCTION IBR_ABRE_GAVETA()  // Abre Gaveta da Impressora, retorna .t. se abriu
***********************************************************************
IBR_COMANDO( 'GAV.AbreGaveta', , 6 )
RETURN IBR_GAVETA_ABERTA()

***********************************************************************
FUNCTION IBR_GAVETA_ABERTA()  // Retorna .t. se Gaveta est  aberta
***********************************************************************
RETURN (upper(SUBSTR(IBR_COMANDO( 'GAV.GavetaAberta' ),5,5)) = 'TRUE')

***********************************************************************
FUNCTION IBR_CONF_BOLETO()  // Retorna .t. se Gaveta est  aberta
***********************************************************************
IBR_COMANDO('BOLETO.LimparLista', ,10)
mensagem('Configurando o BOLETO aguarde... Enviando CEDENTE: '+ALLTRIM(m_indiv[1,37])+"cedente.ini")
IBR_COMANDO('BOLETO.ConfigurarDados',{ALLTRIM(m_indiv[1,37])+"cedente.ini"},10)
mensagem('Configurando o BOLETO aguarde... Enviando TITULO: '+ALLTRIM(m_indiv[1,37])+"titulo.ini")
IBR_COMANDO('BOLETO.ConfigurarDados',{ALLTRIM(m_indiv[1,37])+"titulo.ini"},10)
mensagem('Imprimindo o BOLETO aguarde...')
IBR_COMANDO('BOLETO.Imprimir', ,60)
//atencao( sr_ShowVector(IBR_COMANDO('BOLETO.GerarPDF', ,60)))
IF q_ban[1,18] = 'R'    //.OR. q_ban[1,18] = 'CR'
        //atencao('ok')
        mensagem('Gerando arquivo REMESSA do BOLETO aguarde... Enviando CEDENTE: '+ALLTRIM(m_indiv[1,37])+"cedente.ini")
        //BOLETO.GerarRemessa(cDirArqRemessa,nNumeroArquivo[,nNomeArquivo])
        //IBR_COMANDO('BOLETO.GerarRemessa',{m_indiv[1,38]+n_documento+".rem"},40)
        IBR_COMANDO('BOLETO.GerarRemessa',{m_indiv[1,38]},40)
ENDIF
IF ! EMPTY(cons_cli[1,27])
        mensagem('Enviando EMAIL para: '+cons_cli[1,27])
        IBR_COMANDO('BOLETO.EnviarEmail',{LOWER(ALLTRIM(cons_cli[1,27]))},40)
ENDIF
IBR_COMANDO('BOLETO.LimparLista', ,10)
RETURN NIL

************************************************************************
FUNCTION IBR_COMANDO(CMD,VET_PARAM,ESPERA,TENTA)
* Funcao de uso interno para enviar os comandos para a impressora e
* registrar os erros retornados pela mesma. Exibe os erros se existirem
************************************************************************
LOCAL RET_IMP, REQ, RESP, TEMPOR, TINI, TFIM, BLOCO, BYTES, I, TIPO_PARAM
IF EMPTY(sENDER)
        IF ! SEM_ERRO
                atencao('ACBrMonitor nao foi inicializado.')
        ENDIF
        RETURN ''
ENDIF
DEFAULT VET_PARAM   to {} ,;
ESPERA      to 0  ,;
TENTA       to .t.
///// Codificando CMD de acordo com o protocolo /////
RET_IMP  := ''
//atencao(cmd)
IF ! EMPTY(m_indiv[1,43])
        IF ! ('.' $ LEFT(CMD,7))   // Informou o Objeto no Inicio ?
                CMD := 'NFE.'+CMD       // Se nao informou assume ECF.
        ENDIF
ENDIF
//ATENCAO(CMD)
IF LEN(VET_PARAM) > 0
         CMD := CMD + '('
        FOR i = 1 TO LEN(VET_PARAM)
                TIPO_PARAM := VALtype(VET_PARAM[I])

                IF TIPO_PARAM = 'C'
                // Converte aspas para simples para aspas duplas, para o ACBrMonitor
                        CMD := CMD + '"'+ STRTRAN( RTrim(VET_PARAM[I]), '"', '""' ) + '"'

                ELSEIF TIPO_PARAM = 'N'
                        CMD := CMD + STRTRAN(ALLTRIM(Str(VET_PARAM[I])),',','.')

                ELSEIF TIPO_PARAM = 'D'
                        CMD := CMD + dtoc( VET_PARAM[I] )

                ELSEIF TIPO_PARAM = 'L'
                        CMD := CMD + iif( VET_PARAM[I],'TRUE','FALSE')

                ENDIF

                CMD := CMD + ', '
        next
        CMD := SUBSTR(CMD,1,LEN(CMD)-2) + ')'
ENDIF

CMD := CMD + CR+LF+'.'+CR+LF

IF ! SEM_ERRO
        ESPERA := max(ESPERA,5)
ELSE
        TENTA := .F.
ENDIF
IF PATH_DEL $ sENDER               /// E' TXT ? ///
        //atencao(sENDER + 'ENTNFE.TXT')
        REQ    := sENDER + 'ENTNFE.TXT'
        RESP   := sENDER + SAI_TXT
        TEMPOR := sENDER + TMP_TXT
        //////// Transmitindo o comando /////////
        TFIM := SECONDS() + 3    // Tenta apagar a Resposta anterior em ate 3 segundos
        WHILE file( RESP )
                IF ferase( RESP ) = -1
                        IF (SECONDS() > TFIM)
                                //RET_IMP := 'ERRO: Nao foi possivel apagar o arquivo: ('+RESP+') '+ferror()
                                RET_IMP := 'ERRO: Nao foi possivel apagar o arquivo de RESPOSTA'
                                //ErrorOsMessage(ferror())
                        ELSE
                                INKEY(.10,20)
                        ENDIF
                ENDIF
        ENDDO
        WHILE EMPTY(RET_IMP)
                TFIM := SECONDS() + 3    // Tenta apagar a Requisicao anterior em ate 3 segundos
                WHILE file( REQ )
                        IF ferase( REQ ) = -1
                                IF (SECONDS() > TFIM)
                                        //RET_IMP := 'ERRO: Nao foi possivel apagar o arquivo de REQUISICAO: ('+REQ+') '+ferror()
                                        RET_IMP := 'ERRO: Nao foi possivel apagar o arquivo de REQUISICAO'
                                ELSE
                                        INKEY(.10,20)
                                ENDIF
                        ENDIF
                ENDDO
                // Criando arquivo TEMPORARIO com a requisicao //
                IF EMPTY(RET_IMP)
                        IF ! Grava_ARQ(TEMPOR, CMD)
                                //RET_IMP := 'ERRO: Nao foi possivel criar o arquivo: ('+TEMPOR+') '+ferror()
                                RET_IMP := 'ERRO: Nao foi possivel criar o arquivo TEMPORARIO'
                        ENDIF
                ENDIF
                // Renomeando arquivo TEMPORARIO para REQUISICAO //
                IF EMPTY(RET_IMP)
                        IF frename(TEMPOR, REQ) = -1
                                //RET_IMP := 'ERRO: Nao foi possivel renomear ('+TEMPOR+') para ('+REQ+') '+;
                                RET_IMP := 'ERRO: Nao foi possivel renomear o (ARQUIVO TEMPORARIO)  para (REQUISICAO) ' //+ferror()
                        ENDIF
                ENDIF
                // Espera ACBrMonitor apagar o arquivo de Requisicao em ate 7 segundos
                // Isso significa que ele LEU o arquivo de Requisicao
                TFIM := SECONDS() + 7
                WHILE EMPTY(RET_IMP) .and. (SECONDS() <= TFIM) .and. file(REQ)
                        INKEY(.10,20)
                ENDDO
                IF file(REQ)
                        IF ! TENTA
                                RET_IMP := 'ERRO: ACBrMonitor nao esta ativo'
                        ELSE
                                IF op_simnao('S','O ACBrMonitor nao esta  ativo Deseja tentar novamente:') = 'N'
                                        RET_IMP := 'ERRO: ACBrMonitor nao esta ativo'
                                ELSE
                                        RET_IMP := ''
                                        IF ! file(REQ)  // ACBrMonitor "acordou" enquanto perguntava
                                                exit
                                        ENDIF
                                ENDIF
                        ENDIF
                ELSE
                        exit
                ENDIF
        ENDDO
        //////// Lendo a resposta ////////
        TINI   := SECONDS()
        WHILE EMPTY(RET_IMP)
                IF file(RESP)
                        RET_IMP := ALLTRIM(memoread( RESP ))
                ENDIF
                IF EMPTY(RET_IMP)
                        IF SECONDS() > (TINI + 5)
                                mensagem('Aguardando resposta do ACBrMonitor:  '+; // '('+ProcName(2)+') '+;
                                Trim(str(TINI + ESPERA - SECONDS(),2)))
                        ENDIF
                        IF SECONDS() > (TINI + ESPERA)
                                IF ! TENTA
                                        RET_IMP := 'ERRO: Sem resposta do ACBrMonitor em '+ALLTRIM(str(ESPERA))+;
                                                ' segundos (TimeOut)'
                                ELSE
                                        IF op_simnao('S','O ACBrMonitor nao esta respondendo Deseja tentar novamente ?') <> 'S'
                                                RET_IMP := 'ERRO: Sem resposta do ACBrMonitor em '+ALLTRIM(str(ESPERA))+;
                                                        ' segundos (TimeOut)'
                                        ELSE
                                                RET_IMP := ''
                                                TINI := SECONDS()
                                        ENDIF
                                ENDIF
                        ENDIF
                        INKEY(.10,20)
                ENDIF
        ENDDO
        //   ferase( STRTRAN(RESP,'.TXT','.OLD') )
        //   frename( RESP, STRTRAN(RESP,'.TXT','.OLD') )
        ferase( RESP )
        #IFDEF __XHARBOUR__

        ELSE                                       //// TCP / IP (apenas xHarbour ) ///
                //////// Transmitindo o comando /////////
                InetSetTimeout( sSOCKET, 3000 )   // Timeout de Envio 3 seg //
                IF inetsendall( sSocket, CMD ) <= 0
                        RET_IMP := 'ERRO: Nao foi possivel transmitir dados para o ACBrMonitor|'+;
                                '('+AllTrim(Str(InetErrorCode( sSOCKET )))+') '+;
                                InetErrorDesc( sSOCKET ) + ETX
                ENDIF
                //////// Lendo a resposta ////////
                InetSetTimeout( sSOCKET, 500 )
                TINI   := SECONDS()
                WHILE (RIGHT(RET_IMP,1) <> ETX)
                        BLOCO := SPACE(64)
                        BYTES   := inetrecv(sSOCKET, @BLOCO, 64)
                        RET_IMP += LEFT(BLOCO,BYTES)
                        IF SECONDS() > (TINI + 5)
                                mensagem('Aguardando resposta do ACBrMonitor:  '+; // '('+ProcName(2)+') '+;
                                Trim(str(TINI + ESPERA - SECONDS(),2)))
                        ENDIF
                        IF SECONDS() > (TINI + ESPERA)
                                IF ! TENTA
                                        RET_IMP := 'ERRO: Sem resposta do ACBrMonitor em '+ALLTRIM(str(ESPERA))+;
                                        ' segundos (TimeOut)' + ETX
                                ELSE
                                        IF op_simnao('S','O ACBrMonitor nao esta respondendo Deseja tentar novamente ?') <> 'S'
                                                RET_IMP := 'ERRO: Sem resposta do ACBrMonitor em '+ALLTRIM(str(ESPERA))+;
                                                        ' segundos (TimeOut)' + ETX
                                        ELSE
                                                TINI := SECONDS()
                                        ENDIF
                                ENDIF
                        ENDIF
                ENDDO
        #ENDIF
ENDIF
//IF SUBSTR(RET_IMP,1,3) <> 'OK:' .or. SUBSTR(RET_IMP,1,5) == 'ERRO:'
   //   ALERTA('RETORNO INVALIDO INIFIM|'+RET_IMP+'|'+ ALLTRIM(memoread( RESP )) )
//ENDIF
WHILE RIGHT(RET_IMP,1) $ CR+LF+ETX   // Remove sinalizadores do final
        RET_IMP := LEFT(RET_IMP,LEN(RET_IMP)-1)
ENDDO
IF ! SEM_ERRO
        MSG_ERRO := ''
        IF SUBSTR(RET_IMP,1,5) == 'ERRO:'
                MSG_ERRO := 'Erro ACBrMonitor|'+;  //  'Rotina ('+ProcName(2)+')|'+;
                STRTRAN(STRTRAN(SUBSTR(RET_IMP,7),CR,''),LF,'|')
                //STRTRAN(STRTRAN( MUDA_ACENTOS(SUBSTR(RET_IMP,7)),CR,''),LF,'|')
        ENDIF
        IF ! EMPTY(MSG_ERRO)
                atencao(MSG_ERRO)
                RET_IMP := ''
        ENDIF
ENDIF
//IF SUBSTR(RET_IMP,1,3) <> 'OK:' .or. SUBSTR(RET_IMP,1,5) == 'ERRO:'
   //   ALERTA('RETORNO INVALIDO FIM|'+RET_IMP+'|'+ ALLTRIM(memoread( RESP )) )
//ENDIF
RETURN RET_IMP
************************************************************************
Static FUNCTION Grava_ARQ( WARQ, WTXT )
LOCAL HANDLE, RET := .T.
HANDLE := FCREATE(WARQ, FC_NORMAL )
IF HANDLE > 0
        FWRITE(HANDLE, WTXT + CHR(13) + CHR(10) )
        RET := (FERROR() = 0)
        FCLOSE(HANDLE)
ENDIF
//atencao(WTXT + CHR(13) + CHR(10))
RETURN RET

************************************************************************
FUNCTION IBR_TotFormaPagamento()   
************************************************************************
RETURN IBR_COMANDO( 'ECF.LerTotaisFormaPagamento')
